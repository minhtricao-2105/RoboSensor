// Generated by gencpp from file omcron_package/SetPositionRequest.msg
// DO NOT EDIT!


#ifndef OMCRON_PACKAGE_MESSAGE_SETPOSITIONREQUEST_H
#define OMCRON_PACKAGE_MESSAGE_SETPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace omcron_package
{
template <class ContainerAllocator>
struct SetPositionRequest_
{
  typedef SetPositionRequest_<ContainerAllocator> Type;

  SetPositionRequest_()
    : motion_type(0)
    , positions()
    , velocity(0.0)
    , acc_time(0.0)
    , blend_percentage(0)
    , fine_goal(false)  {
    }
  SetPositionRequest_(const ContainerAllocator& _alloc)
    : motion_type(0)
    , positions(_alloc)
    , velocity(0.0)
    , acc_time(0.0)
    , blend_percentage(0)
    , fine_goal(false)  {
  (void)_alloc;
    }



   typedef int8_t _motion_type_type;
  _motion_type_type motion_type;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _positions_type;
  _positions_type positions;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acc_time_type;
  _acc_time_type acc_time;

   typedef int32_t _blend_percentage_type;
  _blend_percentage_type blend_percentage;

   typedef uint8_t _fine_goal_type;
  _fine_goal_type fine_goal;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PTP_J)
  #undef PTP_J
#endif
#if defined(_WIN32) && defined(PTP_T)
  #undef PTP_T
#endif
#if defined(_WIN32) && defined(LINE_T)
  #undef LINE_T
#endif
#if defined(_WIN32) && defined(CIRC_T)
  #undef CIRC_T
#endif
#if defined(_WIN32) && defined(PLINE_T)
  #undef PLINE_T
#endif

  enum {
    PTP_J = 1,
    PTP_T = 2,
    LINE_T = 4,
    CIRC_T = 6,
    PLINE_T = 8,
  };


  typedef boost::shared_ptr< ::omcron_package::SetPositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::omcron_package::SetPositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPositionRequest_

typedef ::omcron_package::SetPositionRequest_<std::allocator<void> > SetPositionRequest;

typedef boost::shared_ptr< ::omcron_package::SetPositionRequest > SetPositionRequestPtr;
typedef boost::shared_ptr< ::omcron_package::SetPositionRequest const> SetPositionRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::omcron_package::SetPositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::omcron_package::SetPositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::omcron_package::SetPositionRequest_<ContainerAllocator1> & lhs, const ::omcron_package::SetPositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.motion_type == rhs.motion_type &&
    lhs.positions == rhs.positions &&
    lhs.velocity == rhs.velocity &&
    lhs.acc_time == rhs.acc_time &&
    lhs.blend_percentage == rhs.blend_percentage &&
    lhs.fine_goal == rhs.fine_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::omcron_package::SetPositionRequest_<ContainerAllocator1> & lhs, const ::omcron_package::SetPositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace omcron_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::omcron_package::SetPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omcron_package::SetPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omcron_package::SetPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13d486e0180f3a17f2c79013770ec317";
  }

  static const char* value(const ::omcron_package::SetPositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13d486e0180f3a17ULL;
  static const uint64_t static_value2 = 0xf2c79013770ec317ULL;
};

template<class ContainerAllocator>
struct DataType< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "omcron_package/SetPositionRequest";
  }

  static const char* value(const ::omcron_package::SetPositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#motion_type :  PTP_J , PTP_T , LINE_J , LINE_T ,\n"
"#               CIRC_J ,CIRC_T , PLINE_J ,PLINE_T\n"
"# More details please refer to the TM_Robot_Expression.pdf(1.76 rev1.00) Chapter 8.6-8.9\n"
"int8 PTP_J = 1\n"
"int8 PTP_T = 2\n"
"#int8 LINE_J = 3\n"
"int8 LINE_T = 4\n"
"#int8 CIRC_J = 5\n"
"int8 CIRC_T = 6\n"
"#int8 PLINE_J = 7\n"
"int8 PLINE_T = 8\n"
"\n"
"int8 motion_type\n"
"float64[] positions\n"
"float64 velocity       # motion velocity: if expressed in Cartesian coordinate (unit: m/s) , if expressed in joint velocity (unit: rad/s, and the maximum value is limited to pi )\n"
"float64 acc_time       # time to reach maximum speed (unit: ms)\n"
"int32 blend_percentage # blending value: expressed as a percentage (unit: %, and the minimum value of 0 means no blending)\n"
"bool fine_goal         # precise position mode : If activated, the amount of error in the final position will converge more.\n"
;
  }

  static const char* value(const ::omcron_package::SetPositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_type);
      stream.next(m.positions);
      stream.next(m.velocity);
      stream.next(m.acc_time);
      stream.next(m.blend_percentage);
      stream.next(m.fine_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::omcron_package::SetPositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::omcron_package::SetPositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "motion_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motion_type);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acc_time: ";
    Printer<double>::stream(s, indent + "  ", v.acc_time);
    s << indent << "blend_percentage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blend_percentage);
    s << indent << "fine_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fine_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OMCRON_PACKAGE_MESSAGE_SETPOSITIONREQUEST_H
